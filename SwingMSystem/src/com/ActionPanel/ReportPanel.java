/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ActionPanel;


import com.Dao.CertificateDao;
import com.Dao.StudentDao;


import com.model.ModelUser;
import com.JdialogAction.InputDialog;
import com.model.ModelCertificate;

import com.model.ModelStudent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;

import javax.swing.JFileChooser;

import javax.swing.JOptionPane;






import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;




/**
 *
 * @author konod
 */
public class ReportPanel extends javax.swing.JPanel {
    
    
    private final StudentDao studentDao; 
    private final CertificateDao certificateDao ; 

    private static InputDialog customDialog;
    private  ModelUser loginUser ;
    private  DefaultTableModel model;
    private DefaultTableModel cefModel  ; 
    private static void openCustomFrame(JPanel parentFrame) {
        
        customDialog.setLocationRelativeTo(parentFrame);
        customDialog.setVisible(true);

        // Set focus to the text field when the custom dialog is opened
    }

    
    private void Reload()
    {   
        studentTable.ClearTable();
        certificatetable.ClearTable() ; 
        initTableData() ; 
        
        
    }

    // the Event that will be pass into the actionButton 
   private void initTableData() {


for (ModelStudent student : studentDao.getAllStudents())
    {   

        studentTable.addRow(student.toRowTable(null));
    }
for (ModelCertificate cef : certificateDao.getAllCertificates())
    {   

        certificatetable.addRow(cef.toRowTable(null));
    }

   
}
   
   



    /**
     * Creates new form StudentPanel
     * @param loginUser
     */
    public ReportPanel(ModelUser loginUser) {
        this.loginUser = loginUser ;
       
        certificateDao = new CertificateDao() ; 
        studentDao = new StudentDao();
        initComponents();
        initTableData() ;
        model = (DefaultTableModel) studentTable.getModel();
        cefModel = (DefaultTableModel) certificatetable.getModel() ; 
        if(loginUser.getUserRole() == 1)
        {   IMPORTSTUDENT.setVisible(false);
                        IMPORTCEF.setVisible(false);
        }

    }
    
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        studentTable = new com.swing.table.Table();
        IMPORTSTUDENT = new javax.swing.JToggleButton();
        EXPORTSTUDENT = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        certificatetable = new com.swing.table.Table();
        IMPORTCEF = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        EXPORTCEF = new javax.swing.JToggleButton();

        jButton1.setText("jButton1");

        setPreferredSize(new java.awt.Dimension(1058, 741));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        jPanel5.setPreferredSize(new java.awt.Dimension(600, 745));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 204, 255));
        jLabel1.setText("STUDENT OPERTION: ");

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "START YEAR", "END YEAR", "MAJOR", "EQ", "PHONE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(studentTable);

        IMPORTSTUDENT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IMPORTSTUDENT.setForeground(new java.awt.Color(0, 102, 102));
        IMPORTSTUDENT.setText("IMPORT STUDENT");
        IMPORTSTUDENT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMPORTSTUDENTActionPerformed(evt);
            }
        });

        EXPORTSTUDENT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        EXPORTSTUDENT.setForeground(new java.awt.Color(0, 102, 102));
        EXPORTSTUDENT.setText("EXPORT STUDENT");
        EXPORTSTUDENT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXPORTSTUDENTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(75, 365, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EXPORTSTUDENT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(IMPORTSTUDENT)
                .addGap(38, 38, 38))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EXPORTSTUDENT, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IMPORTSTUDENT, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        add(jPanel5);

        jPanel2.setPreferredSize(new java.awt.Dimension(529, 0));

        certificatetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STUDENT ID", "NAME", "ISSUE DATE", "EXPIRY DATE", "GRADE"
            }
        ));
        jScrollPane1.setViewportView(certificatetable);

        IMPORTCEF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IMPORTCEF.setForeground(new java.awt.Color(0, 102, 102));
        IMPORTCEF.setText("IMPORT CERTIFICATE");
        IMPORTCEF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMPORTCEFActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 204, 255));
        jLabel2.setText("CERTIFICATE OPERTION: ");

        EXPORTCEF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        EXPORTCEF.setForeground(new java.awt.Color(0, 102, 102));
        EXPORTCEF.setText("EXPORT CERTIFICATION");
        EXPORTCEF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXPORTCEFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(EXPORTCEF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(IMPORTCEF)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IMPORTCEF, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EXPORTCEF, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents

    private void EXPORTSTUDENTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXPORTSTUDENTActionPerformed
            FileOutputStream excelFOU = null;
        BufferedOutputStream excelBOU = null;
        XSSFWorkbook excelJTableExporter = null;

        //Choose Location For Saving Excel File
        JFileChooser excelFileChooser = new JFileChooser("C:\\Users\\Authentic\\Desktop");
//        Change Dilog Box Title
        excelFileChooser.setDialogTitle("Save As");
//        Onliny filter files with these extensions "xls", "xlsx", "xlsm"
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showSaveDialog(null);

//        Check if save button is clicked
        if (excelChooser == JFileChooser.APPROVE_OPTION) {

            try {
                //Import excel poi libraries to netbeans
                excelJTableExporter = new XSSFWorkbook();
                XSSFSheet excelSheet = excelJTableExporter.createSheet("JTable Sheet");
                //            Loop to get jtable columns and rows
               
                XSSFRow excelRow = excelSheet.createRow(0);
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        XSSFCell excelCell = excelRow.createCell(j);
                         excelCell.setCellValue(model.getColumnName(j)) ;
                      
                    }
                 //Append
                
                for (int i = 1; i < model.getRowCount(); i++) {
                    excelRow = excelSheet.createRow(i);
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        XSSFCell excelCell = excelRow.createCell(j);

                        //Now Get ImageNames From JLabel
                        //get the last column
                       
                        excelCell.setCellValue(model.getValueAt(i, j).toString());

//                        Change the values of the fourth column to image paths
                       
                    }
                }   //Append xlsx file extensions to selected files. To create unique file names
                excelFOU = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBOU = new BufferedOutputStream(excelFOU);
                excelJTableExporter.write(excelBOU);
                JOptionPane.showMessageDialog(null, "Exported Successfully !!!........");
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (excelBOU != null) {
                        excelBOU.close();
                    }
                    if (excelFOU != null) {
                        excelFOU.close();
                    }
                    if (excelJTableExporter != null) {
                        excelJTableExporter.close();
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }

        }
    }//GEN-LAST:event_EXPORTSTUDENTActionPerformed

    private void IMPORTSTUDENTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMPORTSTUDENTActionPerformed
         int nameIndex = -1;
        int startYearIndex = -1;
        int endYearIndex = -1;
        int majorIndex = -1;
        int eqIndex = -1;
        int phoneIndex = -1;

        File excelFile;
        FileInputStream excelFIS = null;
        BufferedInputStream excelBIS = null;
        XSSFWorkbook excelImportToJTable = null;
        String defaultCurrentDirectoryPath = "C:\\Users\\Authentic\\Desktop";
        JFileChooser excelFileChooser = new JFileChooser(defaultCurrentDirectoryPath);
        excelFileChooser.setDialogTitle("Select Excel File");
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showOpenDialog(null);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {
            try {
                       

                excelFile = excelFileChooser.getSelectedFile();
                excelFIS = new FileInputStream(excelFile);
                excelBIS = new BufferedInputStream(excelFIS);
                excelImportToJTable = new XSSFWorkbook(excelBIS);
                XSSFSheet excelSheet = excelImportToJTable.getSheetAt(0);
                
             
        XSSFRow excelRow = excelSheet.getRow(0);
         if (excelRow != null) {
        for (int cell = 0; cell < excelRow.getLastCellNum(); cell++) {
            XSSFCell currentCell = excelRow.getCell(cell);

            // Check if the cell is not null before getting its value
            if (currentCell != null) {
                String cellValue = currentCell.toString();
                switch (cellValue) {
                    case "NAME":
                        nameIndex = cell;
                        System.out.println("Name: " + cell);
                        break;
                    case "START YEAR":
                        startYearIndex = cell;
                        System.out.println("Start Year: " + cell);
                        break;
                    case "END YEAR":
                        endYearIndex = cell;
                        System.out.println("End Year: " + cell);
                        break;
                    case "MAJOR":
                        majorIndex = cell;
                        System.out.println("Major: " + cell);
                        break;
                    case "EQ":
                        eqIndex = cell;
                        System.out.println("EQ: " + cell);
                        break;
                    case "PHONE":
                        phoneIndex = cell;
                        System.out.println("Phone: " + cell);
                        break;
                    // Add more cases as needed for additional columns
                }
                
            
        }
    }
      
                }
                for (int row = 1; row < excelSheet.getLastRowNum(); row++) {
                    excelRow = excelSheet.getRow(row);

XSSFCell excelName = excelRow.getCell(nameIndex);
String name = excelName.getStringCellValue();

    int startYear = Integer.parseInt(excelRow.getCell(startYearIndex).getStringCellValue());
    int endYear = Integer.parseInt(excelRow.getCell(startYearIndex).getStringCellValue());
XSSFCell excelMajor = excelRow.getCell(majorIndex);
String major = excelMajor.getStringCellValue();

XSSFCell excelEQ = excelRow.getCell(eqIndex);
String eq = excelEQ.getStringCellValue();

XSSFCell excelPhone = excelRow.getCell(phoneIndex);
String phone = excelPhone.getStringCellValue();
                   
                    studentDao.addStudent(name, startYear, endYear, major, eq, phone);

                    
                }
                JOptionPane.showMessageDialog(null, "Imported Successfully !!.....");
            } catch (IOException iOException) {
                JOptionPane.showMessageDialog(null, iOException.getMessage());
            } finally {
                try {
                    if (excelFIS != null) {
                        excelFIS.close();
                    }
                    if (excelBIS != null) {
                        excelBIS.close();
                    }
                    if (excelImportToJTable != null) {
                        excelImportToJTable.close();
                    }
                } catch (IOException iOException) {
                    JOptionPane.showMessageDialog(null, iOException.getMessage());
                }
                Reload();
            }
        }
           
    }//GEN-LAST:event_IMPORTSTUDENTActionPerformed

    private void EXPORTCEFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXPORTCEFActionPerformed
        FileOutputStream excelFOU = null;
    BufferedOutputStream excelBOU = null;
    XSSFWorkbook excelJTableExporter = null;

    // Choose Location For Saving Excel File
    JFileChooser excelFileChooser = new JFileChooser("C:\\Users\\Authentic\\Desktop");
    // Change Dialog Box Title
    excelFileChooser.setDialogTitle("Save As");
    // Only filter files with these extensions "xls", "xlsx", "xlsm"
    FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
    excelFileChooser.setFileFilter(fnef);
    int excelChooser = excelFileChooser.showSaveDialog(null);

    // Check if save button is clicked
    if (excelChooser == JFileChooser.APPROVE_OPTION) {
        try {
            // Import excel poi libraries to netbeans
            excelJTableExporter = new XSSFWorkbook();
            XSSFSheet excelSheet = excelJTableExporter.createSheet("Certificate Table");

            // Loop to get jtable columns and rows
            XSSFRow excelRow = excelSheet.createRow(0);
            for (int j = 0; j < cefModel.getColumnCount(); j++) {
                XSSFCell excelCell = excelRow.createCell(j);
                excelCell.setCellValue(cefModel.getColumnName(j));
            }

            // Append
            for (int i = 0; i < cefModel.getRowCount(); i++) {
                excelRow = excelSheet.createRow(i + 1); // Shift by 1 to skip header
                for (int j = 0; j < cefModel.getColumnCount(); j++) {
                    XSSFCell excelCell = excelRow.createCell(j);
                    excelCell.setCellValue(cefModel.getValueAt(i, j).toString());
                }
            }

            // Append xlsx file extensions to selected files. To create unique file names
            excelFOU = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
            excelBOU = new BufferedOutputStream(excelFOU);
            excelJTableExporter.write(excelBOU);
            JOptionPane.showMessageDialog(null, "Exported Successfully !!!........");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (excelBOU != null) {
                    excelBOU.close();
                }
                if (excelFOU != null) {
                    excelFOU.close();
                }
                if (excelJTableExporter != null) {
                    excelJTableExporter.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    }//GEN-LAST:event_EXPORTCEFActionPerformed

    private void IMPORTCEFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMPORTCEFActionPerformed
         int studentIdIndex = -1;
    int nameIndex = -1;
    int issueDateIndex = -1;
    int expiryDateIndex = -1;
    int gradeIndex = -1;

    File excelFile;
    FileInputStream excelFIS = null;
    BufferedInputStream excelBIS = null;
    XSSFWorkbook excelImportToJTable = null;
    String defaultCurrentDirectoryPath = "C:\\Users\\Authentic\\Desktop";
    JFileChooser excelFileChooser = new JFileChooser(defaultCurrentDirectoryPath);
    excelFileChooser.setDialogTitle("Select Excel File");
    FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
    excelFileChooser.setFileFilter(fnef);
    int excelChooser = excelFileChooser.showOpenDialog(null);

    if (excelChooser == JFileChooser.APPROVE_OPTION) {
        try {
            excelFile = excelFileChooser.getSelectedFile();
            excelFIS = new FileInputStream(excelFile);
            excelBIS = new BufferedInputStream(excelFIS);
            excelImportToJTable = new XSSFWorkbook(excelBIS);
            XSSFSheet excelSheet = excelImportToJTable.getSheetAt(0);

            XSSFRow excelRow = excelSheet.getRow(0);

            if (excelRow != null) {
                for (int cell = 0; cell < excelRow.getLastCellNum(); cell++) {
                    XSSFCell currentCell = excelRow.getCell(cell);

                    // Check if the cell is not null before getting its value
                    if (currentCell != null) {
                        String cellValue = currentCell.toString();
                        switch (cellValue) {
                            case "STUDENT ID":
                                studentIdIndex = cell;
                                System.out.println("Student ID: " + cell);
                                break;
                            case "NAME":
                                nameIndex = cell;
                                System.out.println("Name: " + cell);
                                break;
                            case "ISSUE DATE":
                                issueDateIndex = cell;
                                System.out.println("Issue Date: " + cell);
                                break;
                            case "EXPIRY DATE":
                                expiryDateIndex = cell;
                                System.out.println("Expiry Date: " + cell);
                                break;
                            case "GRADE":
                                gradeIndex = cell;
                                System.out.println("Grade: " + cell);
                                break;
                            // Add more cases as needed for additional columns
                        }
                    }
                }
            }

            for (int row = 1; row <= excelSheet.getLastRowNum(); row++) {
                excelRow = excelSheet.getRow(row);

                XSSFCell excelStudentId = excelRow.getCell(studentIdIndex);
                String studentId = excelStudentId.getStringCellValue();

                XSSFCell excelName = excelRow.getCell(nameIndex);
                String name = excelName.getStringCellValue();

                XSSFCell excelIssueDate = excelRow.getCell(issueDateIndex);
                String issueDate = excelIssueDate.getStringCellValue();

                XSSFCell excelExpiryDate = excelRow.getCell(expiryDateIndex);
                String expiryDate = excelExpiryDate.getStringCellValue();

                XSSFCell excelGrade = excelRow.getCell(gradeIndex);
                 float grade =0 ;
if (excelGrade != null) {
    if (excelGrade.getCellType() == CellType.STRING) {
        // If the cell type is STRING, parse the string value to float
        try {
             grade = Float.parseFloat(excelGrade.getStringCellValue());
            // Now you have the grade as a float
        } catch (NumberFormatException e) {
            // Handle the case where the string cannot be parsed to float
            e.printStackTrace();
        }
    } else if (excelGrade.getCellType() == CellType.NUMERIC) {
        // If the cell type is NUMERIC, get the numeric value as float
         grade = (float) excelGrade.getNumericCellValue();
        // Now you have the grade as a float
    }
}

                certificateDao.addCertificate(studentId, name, issueDate, expiryDate, grade);
            }

            JOptionPane.showMessageDialog(null, "Imported Successfully !!.....");
        } catch (IOException iOException) {
            JOptionPane.showMessageDialog(null, iOException.getMessage());
        } finally {
            try {
                if (excelFIS != null) {
                    excelFIS.close();
                }
                if (excelBIS != null) {
                    excelBIS.close();
                }
                if (excelImportToJTable != null) {
                    excelImportToJTable.close();
                }
            } catch (IOException iOException) {
                JOptionPane.showMessageDialog(null, iOException.getMessage());
            }
            Reload();
        }
    }
    }//GEN-LAST:event_IMPORTCEFActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton EXPORTCEF;
    private javax.swing.JToggleButton EXPORTSTUDENT;
    private javax.swing.JToggleButton IMPORTCEF;
    private javax.swing.JToggleButton IMPORTSTUDENT;
    private com.swing.table.Table certificatetable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.swing.table.Table studentTable;
    // End of variables declaration//GEN-END:variables

    
}
